

Working directory is set and necessary packages are installed.
>Change to local directory and declare necessary packages

```{r}
options(warn=-1)
setwd("C:/Users/tbishop/Documents/DCX")

if(!require(easypackages)){install.packages("easypackages")}
library(easypackages)
library(xda)
packages("readr", "stringr", "reshape2", "xgboost", "caret", "tibble", "tidyverse", "dplyr", "tidyr", "xda", "AzureML", prompt = FALSE)
```

```{r}
options(warn=-1)
setwd("C:/Users/tbishop/Documents/DCX")

library(funModeling)

```




# Import Data



CSV Import


```{r loadData, echo=FALSE, message=FALSE,warning=FALSE, results='hide'}
#read_csv()
#read_tsv()

dataset <- read_delim("C:/Users/tbishop/Documents/Practice/Data/titanic.csv", delim = ",", col_names = TRUE)


```


Gather parameters for use in exploration
```{r}
numeric_columns <- colnames(dataset[,sapply(dataset,is.numeric)])

categorical_columns <- colnames(dataset[,sapply(dataset,is.character)])

```





Examine the columns and formatting
```{r}
#FunModeling
df_status(dataset)

#Other
#str(dataset)
```

Convert columns if necessary
```{r}
#Integer conversion


#Float conversion


#Date conversion


#Convert a categorical column to factor



#Convert ALL categorical columns to factors
dataset[categorical_columns] <- lapply(dataset[categorical_columns], factor)


```


Data frame summary information
```{r}
summary(dataset)
```



## Missing data

NA's and NULLS
>Replace column names with desired columns to be changed
```{r}
########################
### Evaluation Tools ###
########################

## Sum of missing values per column
colSums(is.na(dataset))

## View records containing missing data
#dataset[!complete.cases(dataset), ]

```


### Visualize missing data patterns

```{r}
library(VIM)
mice_plot <- aggr(dataset, col=c('navyblue','yellow'),
                    numbers=TRUE, sortVars=TRUE,
                    labels=names(dataset), cex.axis=.7,
                    gap=3, ylab=c("Missing data","Pattern"))
```


### Missing data handling options
>Change column names to desired columns

```{r}
########################
### Handling Options ###
########################

## Omit all incomplete (containing NA) records
#dataset <- na.omit(dataset)

## Drop specific columns with missing data
#dataset <- dataset[ , !(names(dataset) %in% c("Column1", "Column2"))]


## Recode missing values in a column:

## mean of column
dataset$Age[is.na(dataset$Age)] <- mean(dataset$Age, na.rm = TRUE)

## inpute using KNN

```










## Categorical Data

Look at the data in the categrica columns
```{r}
glimpse(dataset[categorical_columns])
```

Create frequency distributions for each categorical column
```{r}
#FunModeling
freq(dataset)
```

Additional categorical tool - list all levels of categorical variables
```{r}
levels(dataset$Embarked)

lengths(lapply(dataset[categorical_columns], levels))
```








## Numerical Data

Create histograms of each variables distribution
```{r}
#FunModeling
plot_num(dataset)
```

Profile information for each numeric variable
```{r}
#FunModeling
profiling_num(dataset)
```





## Correlation

Retrieve individual correlation coefficients with each numeric variable. 
```{r}
#FunModeling
correlation_table(dataset, "Survived")
```

```{r}
#Alternative method - DataExplorer
plot_correlation(dataset, type = 'continuous','Review.Date')

```




```{r}
cor(dataset[numeric_columns])
```







Correlation Plot
```{r}

library(corrplot)
corrplot(cor(dataset[numeric_columns]), type = "upper", order = "hclust", 
         tl.col = "black", tl.srt = 45)

```











Additional correlation analysis, based on several information theory metrics between all variables in a data frame and a target variable.
```{r}
#FunModeling
var_rank_info(dataset, "Survived")
```

### Distribution

```{r}



```







Distribution plot between input and target variable
```{r}
#Plot all numeric columns
cross_plot(data=dataset, input=numeric_columns, target="Survived")

#Call specific columns only
cross_plot(data=dataset, input=c("Age", "Fare"), target="Survived")

```




Box and Whisker Plots
```{r}
#Plot all numeric columns
plotar(data=dataset, input = numeric_columns, target="Survived", plot_type="boxplot")

#Call specific columns only
#plotar(data=dataset, input = c("Age", "Fare"), target="Survived", plot_type="boxplot")


```


Quantitative analysis for binary outcome

>input variable must be categorical. target variable must be binary.
```{r}
df_ca=categ_analysis(data = dataset, input = "Sex", target = "Survived")

head(df_ca)
```



#### Outlier Detection


Set thresholds for outlier detection. 

The Tukey method formula: * The bottom threshold is: Q1 − 3IQR. All below are considered as outliers. The top threshold is: Q1 + 3*IQR. All above are considered as outliers.

The Hampel method formula: * The bottom threshold is: median_value − 3*mad_value. All below are considered as outliers. * The top threshold is: median_value + 3*mad_value. All above are considered as outliers.


```{r}
#Tukey method outlier thresholds
tukey_outlier(dataset$Fare)

#Hampel method outlier thresholds
hampel_outlier(dataset$Fare)


```


```{r}

```






#### Duplicates

Count number of duplicated rows
```{r}
nrow(dataset) - nrow(unique(dataset))
```

Review duplicate rows
```{r}
dataset[duplicated(dataset), ]
```

Options for removing duplicates
```{r}

```



## Data Munging Tools

```{r}
#Apply filters based on known business rules
data <- filter(dataset, dataset$Number == 0, dataset$Category %in% c("Active", "Complete"))


#Drop unusused columns 
data <- dataset[ , !(names(dataset) %in% c("TaskBaselineFinishDate", "TaskBaselineStartDate"))]
```



